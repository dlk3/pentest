#!/usr/bin/sh

#  Using Android phone to get GPS data.
#
#  Install android-tools package on the laptop. 
#  Install gpsd on laptop and configure it to connect to the port number
#  given below, i.e., "tcp://*:50000".
#  Install "Share GPS" app on phone and set up USB connection in
#  the app at the GPSPORT number given below.
#  Comment out the following line when there is no phone/GPS connected.
GPSPORT="50000"

#  MAC address of the wifi interface device to use
MAC='00:c0:ca:b0:88:36'

#  Names for output files
DIR="${HOME%/}"
PCAPNG_FILE="${DIR}/wifi_capture.pcapng"
HC22000_FILE="${DIR}/wifi_capture.hc22000"
CSV_FILE="${DIR}/wifi_capture.csv"
sudo rm "$PCAPNG_FILE" 2>/dev/null
rm "$HC22000_FILE" 2>/dev/null
rm "$CSV_FILE" 2>/dev/null

#  Help text
echo_help () {
	echo 'Usage: wifipcap [-g|--gpsport NNNNN] [-m|--mac NN:NN:NN:NN:NN:NN]'
	echo
	echo 'Execute hcxdumptool to capture wifi network traffic as part of a penetration'
	echo 'test.'
	echo
	echo 'Where:'
	echo '    -g|--gpsport  The port on which the "Sharing GPS" app on the Android phone'
	echo '                  outputs its NMEA GPS data.  The default port is set at the'
	echo "                  top of this script, currently ${GPSPORT}."
	echo '    -m|--mac      The mac address of the wifi interface that is used to perform'
	echo '                  the scan.  The default address is set at the top of this'
	echo "                  script, currently ${MAC}."
}

#  Command line options
CMDLINE=$(getopt -o 'hg:m:' --long 'help,gpsport:,mac:' -- "$@")
if [ $? -ne 0 ]; then
	exit 1
fi
eval set -- "$CMDLINE"
unset CMDLINE
while true; do
	case "$1" in
		'-g'|'--gpsport')
			GPSPORT="$2"
			shift 2
			continue
		;;
		'-m'|'--mac')
			MAC="$2"
			shift 2
			continue
		;;
		'-h'|'--help')
			echo_help
			exit 0
		;;
		'--')
			shift
			break
		;;
		*)
			echo 'Unexpected internal error' >&2
			exit 1
		;;
	esac
done

#  Get interface name based on the MAC address
IF=$(ip -o link | grep "permaddr $MAC" | sed 's/^[^:]*: \([^:]*\):.*/\1/')

#  Drop active wifi connection, if there is one
CON=$(nmcli device show $IF | grep '^GENERAL.CONNECTION:' | cut -d: -f2 | tr -d ' ')
if [ "$CON" != "--" ]; then
	nmcli con down "$CON"
fi
echo "Turning off NetworkManager and wpa_supplicant.services"
sudo systemctl stop NetworkManager wpa_supplicant

#  Collect packets, with or without GPS data
if [ "$GPSPORT" != "" ]; then
	read -p 'Do you want to fetch GPSD data from the Android phone? [y|N]: ' ANSW
	if [ "${ANSW^^}" == "Y" ]; then
		echo "Connect the phone to the computer via USB and start a connection in the"
		read -n 1 -s -r -p "\"Share GPS\" phone app, then press any key to continue."
		echo 
		DEVICECTR=$(adb devices | wc -l)
		if [ $DEVICECTR -gt 2 ]; then
			echo "Starting adb USB port forwarding to TCP port $GPSPORT on localhost" 
			adb forward tcp:$GPSPORT tcp:$GPSPORT
			if [ $? -eq 0 ]; then
				sudo hcxdumptool -i $IF -o "$PCAPNG_FILE" --use_gpsd --disable_deauthentication --enable_status=39
				HCX_RC=$?
				adb forward --remove tcp:$GPSPORT
			else
				exit 1
			fi
		else
			echo "Android phone not found"
			exit 1
		fi
	else
		sudo hcxdumptool -i $IF -o "$PCAPNG_FILE" --disable_deauthentication --enable_status=7
		HCX_RC=$?
	fi
else
	sudo hcxdumptool -i $IF -o "$PCAPNG_FILE" --disable_deauthentication --enable_status=7
	HCX_RC=$?
fi

echo "Turning on NetworkManager and wpa_supplicant.services"
sudo systemctl start wpa_supplicant NetworkManager
#  Restart previous wifi connection, if there was one
if [ "$CON" != "--" ]; then
	nmcli con up "$CON"
fi

if [ $HCX_RC -eq 0 ]; then
	echo "Converting capture file to HC22000 format"
	hcxpcapngtool -o "$HC22000_FILE" --csv="$CSV_FILE" "$PCAPNG_FILE"
	
	#  Reformat the CSV file so that it can be used with Google Maps:
	#  - For each ESSid, find the record with the strongest RSSI and delete the rest
	#  - Change records from tab delimited to comma delimited
	#  - Change the longitude value to a negative number
	#  - Add a column header line at the top
	sort -t$'\t' -k4,4 -k10,10 "$CSV_FILE" | tr $'\t' ',' | awk -F',' '!_[$4]++' | awk -F',' -v OFS=',' '$16=-$16' >"${CSV_FILE}.sorted"
	if [ $? -eq 0 ]; then
		rm "$CSV_FILE"
		echo "YYYY-MM-DD,HH:MM:SS,MAC_AP,ESSID,ENC_TYPE,CIPHER,AKM,COUNTRY_INFO,CHANNEL,RSSI,GPS(DM.m),,GPS(D.d),,LAT, LONG,SATCOUNT,HDOP,ALTITUDE,,UNIT" >"$CSV_FILE"
		cat "${CSV_FILE}.sorted" >>"$CSV_FILE"
		rm "${CSV_FILE}.sorted"
	fi

	#  Tell them where the files are
	echo
	echo "Output files saved in ${DIR}:"
	if [ -f "$HC22000_FILE" ]; then
		echo "    ${HC22000_FILE##*/} - captured data formated for use with hashcat"
	fi
	echo "    ${CSV_FILE##*/} - Network information spreadsheet"
	echo "    ${PCAPNG_FILE##*/} - raw capture data from hcxdumptool"
fi
